find.package("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
print("hello world")
mean(1:20)
x <- 1:20
mean(x)
print("hello world")
mean(1:20)
print("hello world")
mean(1:20)
x <- 1:20
mean(x)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("xlsx")
library(xlsx)
sudo apt-get install openjdk-7-*
library(xlsx)
install.packages("xlsx")
library(xlsx)
sudo R CMD javareconf
library(rJava)
install.packages("rJava")
library(rJava)
HWData <- load.csv("C:\\Projects\\datasciencecoursera\\R Programming\\hw1_data.csv")
HWData <- read.csv("C:\\Projects\\datasciencecoursera\\R Programming\\hw1_data.csv")
Hwdata
HWData
HWData$columns
HWData$Ozone
mean(HWData$Ozone)
x <- (HWData$Ozone)
x
mean(x, na.rm=TRUE)
x <- 4
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- c(3, 5, 1, 10, 12, 6)
x[x<6]==0
x
x[x<=5]<-0
x
HWData <- read.csv("C:\\Projects\\datasciencecoursera\\R Programming\\hw1_data.csv")
HWData
nrow(HWData)
names(HWData)
names(HWData)
nrows(HWData)
nrow(HWData)
HWData[47,]
HWData[1,2,]
7
HWData[47,]
x[HWData$Ozone==NA]
#Load Data from CSV file - output is a Data Frame
HWData <- read.csv("C:\\Projects\\datasciencecoursera\\R Programming\\hw1_data.csv")
HWData
is.na(HWData$Ozone)
HWData <- read.csv("C:\\Projects\\datasciencecoursera\\R Programming\\hw1_data.csv")
sum(is.na(HWData$Ozone))
mean(HWData$Ozone, na.rm=TRUE)
HWData <- read.csv("C:\\Projects\\datasciencecoursera\\R Programming\\hw1_data.csv")
is.na(HWData$Ozone)
mean(HWData$Solar.R)
mean(HWData$Solar.R, na.rm=TRUE)
HWData[1:2]
HWData[1:2]
HWData <- read.csv("C:\\Projects\\datasciencecoursera\\R Programming\\hw1_data.csv")
HWData[1:2]
HWData[1:3]
HWData[152:153]
HWData[152:153,]
HWData[1:2,]
HWData[HWData$Ozone > 31]
x <- HWData$Ozone > 31
x
y <- HWData$Temp > 90
y
HWData[y]
HWData[y,]
HWData[y,x]
HWData[y,]
HWData[x,]
HWData[y,]
x <- HWData$Ozone > 31
HWData[x,]
x <- (HWData$Ozone, na.rm=TRUE) > 31
x <- HWData$Ozone > 31
mean(HWData[y,]$Solar.R, na.rm=TRUE)
HWData[y,]
t <- HWData$Month == 6
mean(t)
t
mean(HWData[t,]$Temp, na.rm=TRUE)
Max.O <- HWData$Month == 5
max(HWData[Max.O,]$Ozone, na.rm=TRUE)
x <- na.omit(HWData$Ozone > 31)
HWData[x,]
x <- na.omit(HWData$Ozone > 31)
y <- HWData$Temp > 90
HWData[x,]
x <- HWData$Ozone > 31 & HWData$Temp > 90
HWData[x,]
mean(HWData[x,]$Solar.R, na.rm=TRUE)
close(HWData)
x <- c("a","b","c","d")
for(i in 1:4) {
print(x[i])
}
for(i in 1:4) {
print(x[i])
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1,1,0.5)
if(coin ==1) {
z <- z+1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 && z <= 10) {
coin <- rbinom(1,1,0.5)
if(coin ==1) {
z <- z+1
print("Heads")
} else {
z <- z - 1
print("Tails")
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
add2(3,5)
add2(3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cube(3,2)
cube(3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
f(3)
x <- 5
print(y)
source('~/.active-rstudio-document')
formals(add2)
formals(cube)
formals(f)
search()
ls()
debug(ls)
ls()
q
ls()
undebug(ls)
ls()
mean
source('~/.active-rstudio-document', echo=TRUE)
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
library(datasets)
data(iris)
x <- rowMeans(iris[,1:4])
x
x <- apply(iris,2,mean)
x <- apply(iris[,1:4],1,mean)
x
x <- apply(iris[,1:4],2,mean)
x
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- 1
x1 <- 2
x2 <- 3
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(data.table)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile=".\\Fdata.csv")
DT <- fread(".\\Fdata.csv")
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
op <- microbenchmark(NULL, sapply(split(DT$pwgtp15,DT$SEX),mean), times=1000L)
print(op)
f <- sapply(split(DT$pwgtp15,DT$SEX),mean)
op <- microbenchmark(NULL, f, times=1000L)
print(op)
op <- microbenchmark(f, times=1000L)
print(op)
op <- microbenchmark(w,x,y,z, times=1000L)
w <- DT[,mean(pwgtp15),by=SEX]
x <- sapply(split(DT$pwgtp15,DT$SEX),mean)
y <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
z <- tapply(DT$pwgtp15,DT$SEX,mean)
op <- microbenchmark(w,x,y,z, times=1000L)
print(op)
op <- microbenchmark(w,y,z, times=1000L)
print(op)
w <- funciton () DT[,mean(pwgtp15),by=SEX]
w <- funciton () {DT[,mean(pwgtp15),by=SEX]}
w <- function () {DT[,mean(pwgtp15),by=SEX]}
w <- function () {DT[,mean(pwgtp15),by=SEX]}
x <-  function () {sapply(split(DT$pwgtp15,DT$SEX),mean)}
y <-  function () {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}
z <-  function () {tapply(DT$pwgtp15,DT$SEX,mean)}
op <- microbenchmark(w(),x(),y(),z(), times=1000L)
print(op)
op <- microbenchmark(w(),x(),y(),z(), times=1000L)
print(op)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
?tbl_df
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
main()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
skip()
skip()
submit()
submit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
setwd("C:\\Projects\\datasciencecoursera\\Reproducible Research\\Peer Assignment 1")
install.packages(dplyr)
install.packages("dplyr")
activity <- read.csv(".\\Activity.csv",na.strings="NA")
library(dplyr)
stepTotalByDate <- aggregate(steps~date,activity,sum)
hist(stepTotalByDate$steps,col="blue",xlab="Total Steps by Day")
mean(stepTotalByDate$steps,na.rm=T)
median(stepTotalByDate$steps,na.rm=T)
stepByInterval <- aggregate(steps~interval,activity,mean)
plot(stepByInterval,type="l")
stepByInterval$interval[which.max(stepByInterval$steps)]
NASteps <- is.na(activity$steps)
sum(is.na(activity$steps))
y <- merge(activity,stepByInterval,by = "interval",all.x=T)
colnames(y) = c("interval","steps","date","avgSteps")
activity.No.NA <- y %>%
group_by(interval) %>%
mutate(newSteps = ifelse(is.na(steps),avgSteps,steps)) %>%
select(interval,date,newSteps)
newStepTotalByDate <- aggregate(newSteps~date,activity.No.NA,sum)
hist(newStepTotalByDate$newSteps,col="green",xlab="Total Steps by Day")
mutate(newStepTotalByDate,weekDay = weekDays(date))
mutate(newStepTotalByDate,weekDay = weekdays(date))
weekdays(newStepTotalByDate$date)
weekdays(newStepTotalByDate$date,abbreviate = FALSE)
weekdays(as.date(newStepTotalByDate$date),abbreviate = FALSE)
newStepTotalByDate$date <- as.POSIXct(newStepTotalByDate$date)
weekdays(newStepTotalByDate$date)
mutate(newStepTotalByDate, weekDay = weekdays(newStepTotalByDate$date))
mutate(newStepTotalByDate, weekDay = ifelse(weekdays(newStepTotalByDate$date) == "Saturday", 1, 0))
mutate(newStepTotalByDate, weekDay = ifelse(weekdays(newStepTotalByDate$date) == "Saturday" | weekdays(newStepTotalByDate$date) == "Sunday", 1, 0))
mutate(newStepTotalByDate, weekDay = ifelse(weekdays(newStepTotalByDate$date) == "Saturday" | weekdays(newStepTotalByDate$date) == "Sunday", "Weekend", "Weekday"))
wd.Steps <- mutate(newStepTotalByDate, weekDay = ifelse(weekdays(newStepTotalByDate$date) == "Saturday" | weekdays(newStepTotalByDate$date) == "Sunday", "Weekend", "Weekday"))
xyplot(wd.Steps$steps ~ wd.Steps$interval | wd.Steps$weekDay, type = "l",
ylab = "Mean", xlab = "Interval", layout = c(1, 2))
library(lattice)
xyplot(wd.Steps$steps ~ wd.Steps$interval | wd.Steps$weekDay, type = "l",
ylab = "Mean", xlab = "Interval", layout = c(1, 2))
head(wd.Steps)
head(newStepTotalByDate)
activity.No.NA
activity.No.NA <- y %>%
group_by(interval) %>%
mutate(newSteps = ifelse(is.na(steps),avgSteps,steps)) %>%
select(interval,date,newSteps)
newStepTotalByDate <- aggregate(newSteps~date,activity.No.NA,sum)
newStepTotalByDate
activity.No.NA$date <- as.POSIXct(activity.No.NA$date)
wd.Steps <- mutate(activity.No.NA, weekDay = ifelse(weekdays(activity.No.NA$date) == "Saturday" | weekdays(activity.No.NA$date) == "Sunday", "Weekend", "Weekday"))
wd.Steps <- mutate(activity.No.NA, weekDay = ifelse(weekdays(activity.No.NA$date) == "Saturday" | weekdays(activity.No.NA$date) == "Sunday", "Weekend", "Weekday"))
activity.No.NA
mutate(activity.No.NA, weekDay = ifelse(weekdays(activity.No.NA$date) == "Saturday" | weekdays(activity.No.NA$date) == "Sunday", "Weekend", "Weekday"))
head(newStepTotalByDate)
head(activity.No.NA)
activity.No.NA$weekDay <- factor(format(activity.No.NA$date,"%A"))
levels(activity.No.NA$weekDay)
levels(activity.No.NA$weekDay) <- list(weekday = c("Monday","Tuesday","Wednesday","Thursday","Friday"),
weekend = c("Saturday","Sunday"))
library(lattice)
avgWDSteps <- aggreate(activity.No.NA$newSteps,
list(interval = as.numeric(activity.No.NA$interval),
weekDay = activity.No.NA$weekDay),
FUN = "mean")
avgWDSteps <- aggregate(activity.No.NA$newSteps,
list(interval = as.numeric(activity.No.NA$interval),
weekDay = activity.No.NA$weekDay),
FUN = "mean")
avgWDSteps
head(avgWDSteps)
colnames(head,c("interval","weekDay","AvgSteps"))
colnames(head) =  c("interval","weekDay","AvgSteps")
colnames(avgWDSteps) =  c("interval","weekDay","AvgSteps")
head(avgWDSteps)
xyplot(avgWDSteps$AvgSteps ~ avgWDSteps$interval | avgWDSteps$weekDay,
layout = c(1,2), type = "l", xlab = "5 min Interval", ylab = "Number of Steps")
activity.No.NA$weekDay <- factor(format(activity.No.NA$date,"%A"))
activity.No.NA$weekDay <- factor(format(activity.No.NA$date,"%A"))
activity.No.NA$weekDay <- factor(format(activity.No.NA$date,"%A"))
